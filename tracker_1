#pip install plotly==4.14.3


#pip install pytest-warnings


import pandas as pd # for data manupulation/extraction
import numpy as np  #for numerical
import plotly.express as px # visulisation 
import seaborn as sns  # high lvl visulisation
import warnings #to get rid of warnings 
warnings.filterwarnings('ignore')
print("All Done!")


global_temp = pd.read_csv('C:/Users/chand/Desktop/1.Project 1-- Predicting the temperatures-20210618T081950Z-001/1.Project 1-- Predicting the temperatures/GlobalTemperatures.csv')

global_temp.head()

def get_y(date):
    return date.split('-')[0];
def get_m(date):
    return date.split('-')[1];
def get_d(date):
    return date.split('-')[2];

print( get_y(global_temp['dt'][0] ) )
print( get_m(global_temp['dt'][0] ) )
print( get_d(global_temp['dt'][0] ) )

global_temp["Year"] = global_temp['dt'].apply(get_y);
global_temp["Month"] = global_temp['dt'].apply(get_m);
global_temp["Day"] = global_temp['dt'].apply(get_d);

global_temp.head()

data = global_temp.groupby('Year').agg( {'LandAverageTemperature':'mean' , 'LandAverageTemperatureUncertainty':'mean'} ).reset_index()
# with reset_index other rows are shown
 # () <- not 100% imp

data

data['LandAverageTemperatureUncertainty_TOP'] = data['LandAverageTemperatureUncertainty'] + data['LandAverageTemperature']
data['LandAverageTemperatureUncertainty_BOTTOM'] = -data['LandAverageTemperatureUncertainty'] + data['LandAverageTemperature']

data.head()

data.columns


px.line(data,x='Year',y =['LandAverageTemperature','LandAverageTemperatureUncertainty_TOP','LandAverageTemperatureUncertainty_BOTTOM'],title = 'Avg Land Temp' )

def get_season(month):
    if month > 12 : return 'Incorrect Input'
    if month == 12 : return 'Winter'
    if month > 8 : return 'Autum'
    if month > 5 : return 'Summer'
    if month > 2 : return 'Spring'
    return 'Winter'


global_temp.dtypes


global_temp['Month']=pd.to_numeric(global_temp['Month'])
global_temp['Day']=pd.to_numeric(global_temp['Day'])
global_temp['Year']=pd.to_numeric(global_temp['Year'])
global_temp['dt']=pd.to_datetime(global_temp['dt'])

global_temp.dtypes

global_temp['Season'] = global_temp['Month'].apply(get_season)

global_temp

Winter= []
Spring= []
Summer = []
Autum = []
Year = []
Seasonal_Years = pd.DataFrame()


global_temp['Year'].unique()

for y in global_temp['Year'].unique():
    current_df = global_temp[ global_temp['Year'] == y ]
    Winter.append( current_df[ current_df['Season']=='Winter']['LandAverageTemperature'].mean())
    Spring.append( current_df[ current_df['Season']=='Spring']['LandAverageTemperature'].mean())
    Summer.append( current_df[ current_df['Season']=='Summer']['LandAverageTemperature'].mean())
    Autum.append( current_df[ current_df['Season']=='Autum']['LandAverageTemperature'].mean())
    Year.append(y)
    

current_df

Seasonal_Years['Year'] = Year
Seasonal_Years['Winter'] = Winter
Seasonal_Years['Spring'] = Spring
Seasonal_Years['Summer'] = Summer
Seasonal_Years['Autum'] = Autum

Seasonal_Years

Seasonal_Years.dtypes

px.line(Seasonal_Years,x='Year',y=['Winter','Spring','Summer','Autum'],title = 'LandAverageTemperatureBySeasons')

city_temp = pd.read_csv('C:/Users/chand/Desktop/1.Project 1-- Predicting the temperatures-20210618T081950Z-001/1.Project 1-- Predicting the temperatures/GlobalLandTemperaturesByCity.csv')

city_temp.head().reset_index()

city_temp['Country'].unique()

Indian_cities = city_temp[city_temp['Country']=='India']

Indian_cities

Indian_cities['City'].unique()

cities = ['New Delhi','Bombay','Bangalore','Madras','Agra','Ahmadabad','Ajmer','Amritsar','Amravati','Bihar']

Indian_Cities_2 = Indian_cities[Indian_cities['City'].isin(cities) ]


Indian_Cities_2

Indian_Cities_2 = Indian_Cities_2[[ 'dt','AverageTemperature' ]]

Indian_Cities_2.columns=['Date','Temperature']

Indian_Cities_2.head()

Indian_Cities_2.dtypes

Indian_Cities_2['Date'] = pd.to_datetime( Indian_Cities_2['Date'] )
Indian_Cities_2.dtypes

Indian_Cities_2.isna().sum()

Indian_Cities_2.sum()

Indian_Cities_2.dropna(inplace=True)
Indian_Cities_2.sum()


Indian_Cities_2.isna().sum()

Indian_Cities_2.set_index('Date',inplace=True)

Indian_Cities_2.head()

import matplotlib.pyplot as plt

plt.figure(figsize=(20,10))
sns.lineplot(x=Indian_Cities_2.index,y=Indian_Cities_2['Temperature'])

from statsmodels.tsa.stattools import adfuller

adfuller(Indian_Cities_2['Temperature'])

def test(data):
    result = adfuller(data)
    labels = ['ADF test' , 'Pval' , '#Lang Used','No. of Obv']
    for val, label in zip(result,labels):
        print('{} : {}'.format(label,val) )
    if result[1] <= 0.05:
        print('Null Hypothesis failed, Data is Stationary')
    else :
        print('Null Hypothesis Passed, Data is not Stationary')

test(Indian_Cities_2)

