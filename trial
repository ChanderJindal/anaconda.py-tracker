#pip install plotly==4.14.3


#pip install pytest-warnings


import pandas as pd # for data manupulation/extraction
import numpy as np  #for numerical
import plotly.express as px # visulisation 
import seaborn as sns  # high lvl visulisation
import warnings #to get rid of warnings 
warnings.filterwarnings('ignore')
print("All Done!")


global_temp = pd.read_csv('C:/Users/chand/Desktop/1.Project 1-- Predicting the temperatures-20210618T081950Z-001/1.Project 1-- Predicting the temperatures/GlobalTemperatures.csv')

global_temp.head()

def get_y(date):
    return date.split('-')[0];
def get_m(date):
    return date.split('-')[1];
def get_d(date):
    return date.split('-')[2];

print( get_y(global_temp['dt'][0] ) )
print( get_m(global_temp['dt'][0] ) )
print( get_d(global_temp['dt'][0] ) )

global_temp["Year"] = global_temp['dt'].apply(get_y);
global_temp["Month"] = global_temp['dt'].apply(get_m);
global_temp["Day"] = global_temp['dt'].apply(get_d);

global_temp.head()

data = global_temp.groupby('Year').agg( {'LandAverageTemperature':'mean' , 'LandAverageTemperatureUncertainty':'mean'} ).reset_index()
# with reset_index other rows are shown
 # () <- not 100% imp

data

data['LandAverageTemperatureUncertainty_TOP'] = data['LandAverageTemperatureUncertainty'] + data['LandAverageTemperature']
data['LandAverageTemperatureUncertainty_BOTTOM'] = -data['LandAverageTemperatureUncertainty'] + data['LandAverageTemperature']

data.head()

data.columns


px.line(data,x='Year',y =['LandAverageTemperature','LandAverageTemperatureUncertainty_TOP','LandAverageTemperatureUncertainty_BOTTOM'],title = 'Avg Land Temp' )

def get_season(month):
    if month > 12 : return 'Incorrect Input'
    if month == 12 : return 'Winter'
    if month > 8 : return 'Autum'
    if month > 5 : return 'Summer'
    if month > 2 : return 'Spring'
    return 'Winter'


global_temp.dtypes


global_temp['Month']=pd.to_numeric(global_temp['Month'])
global_temp['Day']=pd.to_numeric(global_temp['Day'])
global_temp['Year']=pd.to_numeric(global_temp['Year'])
global_temp['dt']=pd.to_datetime(global_temp['dt'])

global_temp.dtypes

global_temp['Season'] = global_temp['Month'].apply(get_season)

global_temp

Winter= []
Spring= []
Summer = []
Autum = []
Year = []
Seasonal_Years = pd.DataFrame()


global_temp['Year'].unique()

for y in global_temp['Year'].unique():
    temps = [0,0,0,0]
    if global_temp['Season'] is 'Winter': temps[0] += global_temp['LandAverageTemperature']
    elif global_temp['Season'] is 'Spring' : temps[1] += global_temp['LandAverageTemperature']
    elif global_temp['Season'] is 'Summer' : temps[2] += global_temp['LandAverageTemperature']
    elif global_temp['Season'] is 'Autum' : temps[3] += global_temp['LandAverageTemperature'] # 'Autum'
    Winter.append( temps[0]/3 )
    Spring.append( temps[1]/3 )
    Summer.append( temps[2]/3 )
    Autum.append( temps[3]/3 )
    Year.append(y)
    

Seasonal_Years['Year'] = Year
Seasonal_Years['Winter'] = Winter
Seasonal_Years['Spring'] = Spring
Seasonal_Years['Summer'] = Summer
Seasonal_Years['Autum'] = Autum

Seasonal_Years

Seasonal_Years.dtypes

px.line()
